package me.predatorray.jdbc.datasource;

import java.sql.*;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Executor;

public class CascadedClosingConnection extends ConnectionProxy {

    private final Connection originalConnection;
    private final List<Statement> cascadedStatements;

    public CascadedClosingConnection(Connection originalConnection) {
        super(originalConnection);
        this.originalConnection = originalConnection;
        cascadedStatements = Collections.synchronizedList(
                new LinkedList<Statement>());
    }

    @Override
    public Statement createStatement() throws SQLException {
        Statement statement = originalConnection.createStatement();
        cascadedStatements.add(statement);
        return statement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        PreparedStatement preparedStatement = originalConnection
                .prepareStatement(sql);
        cascadedStatements.add(preparedStatement);
        return preparedStatement;
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        CallableStatement callableStatement = originalConnection.prepareCall
                (sql);
        cascadedStatements.add(callableStatement);
        return callableStatement;
    }

    @Override
    public void close() throws SQLException {
        for (Statement cascadedStatement : cascadedStatements) {
            try {
                if (!cascadedStatement.isClosed()) {
                    cascadedStatement.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        originalConnection.close();
    }

    @Override
    public Statement createStatement(int resultSetType,
                                     int resultSetConcurrency)
            throws SQLException {
        Statement statement = originalConnection.createStatement
                (resultSetType, resultSetConcurrency);
        cascadedStatements.add(statement);
        return statement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency)
            throws SQLException {
        PreparedStatement preparedStatement = originalConnection
                .prepareStatement(sql, resultSetType, resultSetConcurrency);
        cascadedStatements.add(preparedStatement);
        return preparedStatement;
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType,
                                         int resultSetConcurrency)
            throws SQLException {
        CallableStatement callableStatement = originalConnection.prepareCall
                (sql, resultSetType, resultSetConcurrency);
        cascadedStatements.add(callableStatement);
        return callableStatement;
    }

    @Override
    public Statement createStatement(int resultSetType,
                                     int resultSetConcurrency,
                                     int resultSetHoldability)
            throws SQLException {
        Statement statement = originalConnection.createStatement
                (resultSetType, resultSetConcurrency, resultSetHoldability);
        cascadedStatements.add(statement);
        return statement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency,
                                              int resultSetHoldability)
            throws SQLException {
        PreparedStatement preparedStatement = originalConnection
                .prepareStatement(sql, resultSetType, resultSetConcurrency,
                        resultSetHoldability);
        cascadedStatements.add(preparedStatement);
        return preparedStatement;
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType,
                                         int resultSetConcurrency,
                                         int resultSetHoldability)
            throws SQLException {
        CallableStatement callableStatement = originalConnection.prepareCall
                (sql, resultSetType, resultSetConcurrency,
                        resultSetHoldability);
        cascadedStatements.add(callableStatement);
        return callableStatement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql,
                                              int autoGeneratedKeys)
            throws SQLException {
        PreparedStatement preparedStatement = originalConnection
                .prepareStatement(sql, autoGeneratedKeys);
        cascadedStatements.add(preparedStatement);
        return preparedStatement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
            throws SQLException {
        PreparedStatement preparedStatement = originalConnection
                .prepareStatement(sql, columnIndexes);
        cascadedStatements.add(preparedStatement);
        return preparedStatement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        PreparedStatement preparedStatement = originalConnection
                .prepareStatement(sql, columnNames);
        cascadedStatements.add(preparedStatement);
        return preparedStatement;
    }

    @Override
    public void setSchema(String schema) throws SQLException {
        originalConnection.setSchema(schema);
    }

    @Override
    public String getSchema() throws SQLException {
        return originalConnection.getSchema();
    }

    @Override
    public void abort(Executor executor) throws SQLException {
        originalConnection.abort(executor);
    }

    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds)
            throws SQLException {
        originalConnection.setNetworkTimeout(executor, milliseconds);
    }

    @Override
    public int getNetworkTimeout() throws SQLException {
        return originalConnection.getNetworkTimeout();
    }

    @Override
    protected void finalize() {
        try {
            if (!isClosed()) {
                this.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
